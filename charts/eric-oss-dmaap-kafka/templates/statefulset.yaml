apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "eric-oss-dmaap-kafka-statefulset.name" . }}
  labels:
    app: {{ template "eric-oss-dmaap-kafka-statefulset.name" . }}
  {{- include "eric-oss-dmaap-kafka.kubernetes-io-info" .| nindent 4 }}
  annotations:
  {{- include "eric-oss-dmaap-kafka.helm-annotations" .| nindent 4 }}
spec:
  serviceName: {{ .Values.service.name }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type | quote }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: {{ template "eric-oss-dmaap-kafka-statefulset.name" . }}
  template:
    metadata:
      annotations:
      {{- include "eric-oss-dmaap-kafka.helm-annotations" .| nindent 8 }}
      labels:
        app: {{ template "eric-oss-dmaap-kafka.name" . }}
        release: {{ .Release.Name }}
        {{- include "eric-oss-dmaap-kafka.kubernetes-io-info" .| nindent 8 }}
    spec:
      serviceAccountName: {{ template "eric-oss-dmaap-kafka.name" . }}-sa
      {{- if  .Values.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.pullSecret | quote }}
      {{- else if .Values.global.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.pullSecret | quote }}
      {{- end }}
      affinity:
        podAntiAffinity:
          {{if eq .Values.podAntiAffinityType "hard" -}}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- else -}}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- end}}
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ .Chart.Name }}
              topologyKey: "kubernetes.io/hostname"
      {{- if .Values.nodeAffinity }}
      nodeAffinity:
        {{ toYaml .Values.nodeAffinity | indent 10 }}
      {{- end }}
      initContainers:
      - name: {{ .Chart.Name }}-initcontainer
        image: "{{ template "eric-oss-dmaap-kafka.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "init" "name" }}:{{ index .Values "images" "init" "tag" }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command: ['sh', '-c', 'until nslookup eric-data-coordinator-zk; do echo waiting for eric-data-coordinator-zk; sleep 10; done;']
      - command:
        -  sh
        - -exec
        - |
          chown -R 1000:1000 /opt/kafka/data;
          cp /opt/kafka/tmpconfig/server.properties /opt/kafka/config/;
          chown 1000:1000 /opt/kafka/config/server.properties;
          cd /opt/kafka/config;
          ls;
        image: "{{ template "eric-oss-dmaap-kafka.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "init" "name" }}:{{ index .Values "images" "init" "tag" }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /opt/kafka/data
          name: kafka-data
        - mountPath: /opt/kafka/tmpconfig/server.properties
          subPath: server.properties
          name: server
        - mountPath: /opt/kafka/config
          name: config-data
        name: {{ .Chart.Name }}-permission-fixer
        securityContext:
          allowPrivilegeEscalation: true
          runAsNonRoot: false
          runAsUser: 0
      containers:
      - name: {{ .Chart.Name  }}
        image: "{{ template "eric-oss-dmaap-kafka.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "eric-oss-dmaap-kafka" "name" }}:{{ index .Values "images" "eric-oss-dmaap-kafka" "tag" }}"
        imagePullPolicy:  {{ .Values.global.pullPolicy | default .Values.pullPolicy }}
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=INTERNAL_SASL_PLAINTEXT://:{{ .Values.service.internalPort }} && \
          exec start-kafka.sh
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory | quote }}
            cpu: {{ .Values.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.resources.limits.memory | quote }}
            cpu: {{ .Values.resources.limits.cpu | quote }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        - containerPort: {{ .Values.service.externalPort }}
       {{ if eq .Values.liveness.enabled true }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}
        {{ end }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.readiness.timeoutSeconds }}
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: aaf_locate_url
          value: https://aaf-locate:8095

        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /opt/kafka/tmpconfig/server.properties
          subPath: server.properties
          name: server
        - mountPath: /opt/kafka/config/server.properties
          subPath: server.properties
          name: config-data
        - mountPath: /opt/kafka/config/log4j.properties
          subPath: log4j.properties
          name: log4j
        - mountPath: /opt/kafka/config/cadi.properties
          subPath: cadi.properties
          name: cadi
        - mountPath: /opt/kafka/data
          name: kafka-data
        securityContext:
          allowPrivilegeEscalation: true
          runAsNonRoot: true
          runAsUser: 1000
      {{- if .Values.tolerations }}
      tolerations:
        {{ toYaml .Values.tolerations | indent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector }}
      {{- else if .Values.global.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.global.nodeSelector }}
      {{- end }}
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: config-data
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: server
        configMap:
          name: {{ .Chart.Name }}-server-prop-configmap
      - name: log4j
        configMap:
          name: {{ .Chart.Name }}-log4j-prop-configmap
      - name: cadi
        configMap:
          name: {{ .Chart.Name }}-cadi-prop-configmap
{{ if not .Values.persistence.enabled }}
      - name: kafka-data
        emptyDir: {}
{{ else }}
  volumeClaimTemplates:
    - metadata:
        name: {{ template "eric-oss-dmaap-kafka-statefulset.name" . }}
        labels:
          app: {{ template "eric-oss-dmaap-kafka-statefulset.name" . }}
        {{- include "eric-oss-dmaap-kafka.kubernetes-io-info" .| nindent 4 }}
        annotations:
        {{- include "eric-oss-dmaap-kafka.helm-annotations" .| nindent 4 }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        selector:
          matchLabels:
            release: "{{ .Release.Name }}"
            app: {{ .Values.service.name }}
            chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
            heritage: "{{ .Release.Service }}"
{{ end }}
